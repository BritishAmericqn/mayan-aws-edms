"""
PDF Report Generators for Research Platform.
Task 3.6: Professional PDF report generation with charts and styling.
"""
import io
import os
import logging
from datetime import datetime, timedelta
from collections import defaultdict, Counter

from django.conf import settings
from django.contrib.auth import get_user_model
from django.utils import timezone
from django.utils.translation import gettext_lazy as _

# Optional ReportLab imports - gracefully handle missing dependency
try:
    from reportlab.lib import colors
    from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT
    from reportlab.lib.pagesizes import letter, A4
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import inch
    from reportlab.platypus import (
        SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle,
        PageBreak, Image as RLImage, KeepTogether
    )
    from reportlab.graphics.shapes import Drawing, Rect
    from reportlab.graphics.charts.barcharts import VerticalBarChart
    from reportlab.graphics.charts.piecharts import Pie
    from reportlab.graphics.charts.lineplots import LinePlot
    from reportlab.graphics import renderPDF
    REPORTLAB_AVAILABLE = True
except ImportError:
    REPORTLAB_AVAILABLE = False

from mayan.apps.events.models import Action

from ..models import Project, Study, Dataset
from ..sharing.models import SharedDocument

User = get_user_model()
logger = logging.getLogger(__name__)


class PDFReportGenerator:
    """
    Base class for generating professional PDF reports.
    Handles common styling, headers, footers, and chart generation.
    """
    
    def __init__(self, title="Research Report", author="Mayan EDMS"):
        if not REPORTLAB_AVAILABLE:
            raise ImportError("ReportLab is required for PDF generation. Please install with: pip install reportlab")
            
        self.title = title
        self.author = author
        self.doc = None
        self.story = []
        self.styles = getSampleStyleSheet()
        self._setup_custom_styles()

    def _check_reportlab_availability(self):
        """Check if ReportLab is available and raise helpful error if not."""
        if not REPORTLAB_AVAILABLE:
            raise ImportError(
                "ReportLab is not installed. PDF generation is not available. "
                "To enable PDF reports, install ReportLab: pip install reportlab"
            )

    def _setup_custom_styles(self):
        """Setup custom styles for professional reports."""
        # Title style
        self.styles.add(ParagraphStyle(
            name='CustomTitle',
            parent=self.styles['Title'],
            fontSize=24,
            spaceAfter=30,
            textColor=colors.HexColor('#1f2937'),
            alignment=TA_CENTER
        ))
        
        # Section header style
        self.styles.add(ParagraphStyle(
            name='SectionHeader',
            parent=self.styles['Heading1'],
            fontSize=16,
            spaceAfter=12,
            textColor=colors.HexColor('#0d6efd'),
            borderWidth=1,
            borderColor=colors.HexColor('#0d6efd'),
            borderPadding=8,
            backColor=colors.HexColor('#f8f9fa')
        ))
        
        # Metric style
        self.styles.add(ParagraphStyle(
            name='MetricValue',
            parent=self.styles['Normal'],
            fontSize=14,
            textColor=colors.HexColor('#198754'),
            alignment=TA_CENTER,
            spaceAfter=6
        ))
        
        # Footer style
        self.styles.add(ParagraphStyle(
            name='Footer',
            parent=self.styles['Normal'],
            fontSize=8,
            textColor=colors.grey,
            alignment=TA_CENTER
        ))

    def generate_header(self, story, title, subtitle=None):
        """Generate professional report header."""
        # Logo placeholder (could be enhanced with actual logo)
        story.append(Paragraph("üèõÔ∏è Research Platform", self.styles['Normal']))
        story.append(Spacer(1, 12))
        
        # Main title
        story.append(Paragraph(title, self.styles['CustomTitle']))
        
        if subtitle:
            story.append(Paragraph(subtitle, self.styles['Heading2']))
        
        # Report metadata
        metadata_table = Table([
            ['Generated:', self.created_at.strftime('%Y-%m-%d %H:%M UTC')],
            ['Generated by:', str(self.user) if self.user else 'System'],
            ['Report Type:', self.__class__.__name__.replace('Generator', '')]
        ], colWidths=[2*inch, 3*inch])
        
        metadata_table.setStyle(TableStyle([
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('TEXTCOLOR', (0, 0), (0, -1), colors.grey),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.lightgrey)
        ]))
        
        story.append(metadata_table)
        story.append(Spacer(1, 24))

    def generate_footer(self, story):
        """Generate professional report footer."""
        story.append(Spacer(1, 24))
        story.append(Paragraph(
            f"Generated by Mayan EDMS Research Platform ‚Ä¢ {timezone.now().year} ‚Ä¢ Page <seq id='page'/>",
            self.styles['Footer']
        ))

    def create_metrics_table(self, metrics_data, title):
        """Create a professional metrics table."""
        data = [['Metric', 'Value']]
        for metric, value in metrics_data.items():
            formatted_value = f"{value:,}" if isinstance(value, int) else str(value)
            data.append([metric, formatted_value])
        
        table = Table(data, colWidths=[3*inch, 2*inch])
        table.setStyle(TableStyle([
            # Header styling
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#0d6efd')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('FONTSIZE', (0, 1), (-1, -1), 10),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            
            # Alternating row colors
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#f8f9fa')]),
            
            # Borders
            ('GRID', (0, 0), (-1, -1), 1, colors.lightgrey),
            ('LINEBELOW', (0, 0), (-1, 0), 2, colors.HexColor('#0d6efd'))
        ]))
        
        return KeepTogether([
            Paragraph(title, self.styles['SectionHeader']),
            Spacer(1, 12),
            table,
            Spacer(1, 24)
        ])

    def create_chart_placeholder(self, chart_type, title, width=400, height=200):
        """Create a placeholder for charts (can be enhanced with actual charts)."""
        drawing = Drawing(width, height)
        
        # Background
        drawing.add(Rect(0, 0, width, height, fillColor=colors.HexColor('#f8f9fa'), strokeColor=colors.grey))
        
        # Chart placeholder text
        from reportlab.graphics.shapes import String
        drawing.add(String(width/2, height/2, f"{chart_type}: {title}", 
                           textAnchor='middle', fontSize=12, fillColor=colors.grey))
        
        return drawing


class ComplianceReportGenerator(PDFReportGenerator):
    """
    Generate comprehensive compliance reports for research platform.
    Task 3.6: Professional compliance reporting with audit trails.
    """
    
    def generate_report(self, time_range_days=30):
        """Generate complete compliance report."""
        self._check_reportlab_availability()
        logger.info(f"Generating compliance report for {time_range_days} days")
        
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4, topMargin=0.5*inch)
        story = []
        
        # Header
        self.generate_header(
            story, 
            "Research Platform Compliance Report",
            f"Security and Audit Analysis - {time_range_days} Days"
        )
        
        # Executive Summary
        self._add_executive_summary(story, time_range_days)
        
        # Security Metrics
        self._add_security_metrics(story, time_range_days)
        
        # Audit Events Analysis
        self._add_audit_events_analysis(story, time_range_days)
        
        # Sharing Compliance
        self._add_sharing_compliance(story, time_range_days)
        
        # Data Quality Assessment
        self._add_data_quality_assessment(story)
        
        # Recommendations
        self._add_recommendations(story)
        
        # Footer
        self.generate_footer(story)
        
        # Build document
        doc.build(story)
        buffer.seek(0)
        
        logger.info("Compliance report generated successfully")
        return buffer

    def _add_executive_summary(self, story, days):
        """Add executive summary section."""
        story.append(Paragraph("Executive Summary", self.styles['SectionHeader']))
        
        # Calculate key metrics
        end_date = timezone.now()
        start_date = end_date - timedelta(days=days)
        
        events = Action.objects.filter(
            verb__startswith='research.',
            timestamp__gte=start_date
        )
        
        security_events = events.filter(
            verb__in=[
                'research.security_scan_performed',
                'research.shared_document_accessed',
                'research.audit_trail_accessed'
            ]
        ).count()
        
        total_events = events.count()
        active_shares = SharedDocument.objects.filter(is_active=True).count()
        
        summary_text = f"""
        This compliance report covers the {days}-day period from {start_date.strftime('%Y-%m-%d')} 
        to {end_date.strftime('%Y-%m-%d')}. During this period:
        
        ‚Ä¢ <b>{total_events}</b> total audit events were recorded
        ‚Ä¢ <b>{security_events}</b> security-related events occurred  
        ‚Ä¢ <b>{active_shares}</b> active document shares are currently maintained
        ‚Ä¢ Research platform demonstrates <b>strong compliance</b> with audit requirements
        
        The system shows robust security monitoring and comprehensive audit trail maintenance,
        supporting enterprise-grade compliance requirements for research data management.
        """
        
        story.append(Paragraph(summary_text, self.styles['Normal']))
        story.append(Spacer(1, 24))

    def _add_security_metrics(self, story, days):
        """Add security metrics section."""
        active_shares = SharedDocument.objects.filter(is_active=True)
        expired_shares = active_shares.filter(expires_at__lt=timezone.now())
        
        security_metrics = {
            'Active Document Shares': active_shares.count(),
            'Expired Shares': expired_shares.count(),
            'Shares with Access Limits': active_shares.filter(max_access_count__isnull=False).count(),
            'Total Share Accesses': sum(share.access_count for share in active_shares),
            'Average Accesses per Share': round(
                sum(share.access_count for share in active_shares) / max(active_shares.count(), 1), 2
            )
        }
        
        story.append(self.create_metrics_table(security_metrics, "Security Metrics"))

    def _add_audit_events_analysis(self, story, days):
        """Add audit events analysis."""
        end_date = timezone.now()
        start_date = end_date - timedelta(days=days)
        
        events = Action.objects.filter(
            verb__startswith='research.',
            timestamp__gte=start_date
        )
        
        # Event category breakdown
        categories = defaultdict(int)
        for event in events:
            if 'security' in event.verb or 'audit' in event.verb:
                categories['Security & Audit'] += 1
            elif 'shared' in event.verb or 'sharing' in event.verb:
                categories['Document Sharing'] += 1
            elif 'quality' in event.verb or 'validation' in event.verb:
                categories['Data Quality'] += 1
            elif 'project' in event.verb or 'study' in event.verb or 'dataset' in event.verb:
                categories['Research Operations'] += 1
            else:
                categories['Other'] += 1
        
        audit_metrics = {
            'Total Events': events.count(),
            'Security Events': categories['Security & Audit'],
            'Sharing Events': categories['Document Sharing'],
            'Quality Events': categories['Data Quality'],
            'Research Events': categories['Research Operations']
        }
        
        story.append(self.create_metrics_table(audit_metrics, "Audit Events Analysis"))

    def _add_sharing_compliance(self, story, days):
        """Add document sharing compliance section."""
        shares = SharedDocument.objects.all()
        
        sharing_metrics = {
            'Total Document Shares': shares.count(),
            'Active Shares': shares.filter(is_active=True).count(),
            'Shares with Expiration': shares.exclude(expires_at__isnull=True).count(),
            'Recently Created': shares.filter(
                created_at__gte=timezone.now() - timedelta(days=days)
            ).count(),
            'Total Downloads': sum(share.access_count for share in shares)
        }
        
        story.append(self.create_metrics_table(sharing_metrics, "Document Sharing Compliance"))

    def _add_data_quality_assessment(self, story):
        """Add data quality assessment."""
        projects = Project.objects.all()
        studies = Study.objects.all()
        datasets = Dataset.objects.all()
        
        projects_with_desc = projects.exclude(description='').count()
        
        quality_metrics = {
            'Total Projects': projects.count(),
            'Projects with Descriptions': projects_with_desc,
            'Project Quality Score': f"{(projects_with_desc / max(projects.count(), 1) * 100):.1f}%",
            'Total Studies': studies.count(),
            'Total Datasets': datasets.count(),
            'Research Data Completeness': 'Good' if datasets.count() > 0 else 'Needs Improvement'
        }
        
        story.append(self.create_metrics_table(quality_metrics, "Data Quality Assessment"))

    def _add_recommendations(self, story):
        """Add compliance recommendations."""
        story.append(Paragraph("Compliance Recommendations", self.styles['SectionHeader']))
        
        recommendations = [
            "Continue regular security scanning and audit trail monitoring",
            "Implement automated cleanup of expired document shares",
            "Enhance data quality validation for project descriptions",
            "Consider implementing role-based access controls for sensitive data",
            "Schedule regular compliance reviews (quarterly recommended)",
            "Maintain comprehensive backup procedures for audit data"
        ]
        
        for i, rec in enumerate(recommendations, 1):
            story.append(Paragraph(f"{i}. {rec}", self.styles['Normal']))
        
        story.append(Spacer(1, 24))


class ResearchSummaryGenerator(PDFReportGenerator):
    """
    Generate research project summary reports.
    Task 3.6: Professional research reporting for project overviews.
    """
    
    def generate_project_report(self, project_id):
        """Generate comprehensive project summary report."""
        self._check_reportlab_availability()
        try:
            project = Project.objects.get(pk=project_id)
        except Project.DoesNotExist:
            logger.error(f"Project {project_id} not found for report generation")
            raise ValueError(f"Project {project_id} not found")
        
        logger.info(f"Generating research summary for project: {project.title}")
        
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4, topMargin=0.5*inch)
        story = []
        
        # Header
        self.generate_header(
            story,
            f"Research Project Summary: {project.title}",
            f"Generated on {timezone.now().strftime('%Y-%m-%d')}"
        )
        
        # Project Overview
        self._add_project_overview(story, project)
        
        # Studies Summary
        self._add_studies_summary(story, project)
        
        # Datasets Analysis
        self._add_datasets_analysis(story, project)
        
        # Activity Timeline
        self._add_activity_timeline(story, project)
        
        # Footer
        self.generate_footer(story)
        
        # Build document
        doc.build(story)
        buffer.seek(0)
        
        logger.info(f"Research summary generated for project: {project.title}")
        return buffer

    def _add_project_overview(self, story, project):
        """Add project overview section."""
        story.append(Paragraph("Project Overview", self.styles['SectionHeader']))
        
        overview_data = [
            ['Project Title', project.title],
            ['Principal Investigator', project.principal_investigator],
            ['Institution', project.institution or 'Not specified'],
            ['Start Date', project.start_date.strftime('%Y-%m-%d') if project.start_date else 'Not specified'],
            ['End Date', project.end_date.strftime('%Y-%m-%d') if project.end_date else 'Not specified'],
            ['Status', project.status or 'Active'],
        ]
        
        table = Table(overview_data, colWidths=[2.5*inch, 3.5*inch])
        table.setStyle(TableStyle([
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('TEXTCOLOR', (0, 0), (0, -1), colors.grey),
            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.lightgrey),
            ('ROWBACKGROUNDS', (0, 0), (-1, -1), [colors.white, colors.HexColor('#f8f9fa')])
        ]))
        
        story.append(table)
        story.append(Spacer(1, 12))
        
        if project.description:
            story.append(Paragraph("Description:", self.styles['Heading3']))
            story.append(Paragraph(project.description, self.styles['Normal']))
        
        story.append(Spacer(1, 24))

    def _add_studies_summary(self, story, project):
        """Add studies summary section."""
        studies = project.studies.all()
        
        study_metrics = {
            'Total Studies': studies.count(),
            'Active Studies': studies.filter(status='active').count() if hasattr(Study, 'status') else studies.count(),
            'Studies with Datasets': studies.filter(datasets__isnull=False).distinct().count(),
        }
        
        story.append(self.create_metrics_table(study_metrics, "Studies Summary"))
        
        if studies.exists():
            story.append(Paragraph("Study Details:", self.styles['Heading3']))
            
            for study in studies[:5]:  # Limit to first 5 for space
                story.append(Paragraph(f"‚Ä¢ <b>{study.title}</b>", self.styles['Normal']))
                if study.description:
                    story.append(Paragraph(f"  {study.description[:200]}{'...' if len(study.description) > 200 else ''}", 
                                         self.styles['Normal']))
            
            if studies.count() > 5:
                story.append(Paragraph(f"... and {studies.count() - 5} more studies", self.styles['Normal']))
        
        story.append(Spacer(1, 24))

    def _add_datasets_analysis(self, story, project):
        """Add datasets analysis section."""
        datasets = Dataset.objects.filter(study__project=project)
        
        dataset_metrics = {
            'Total Datasets': datasets.count(),
            'Datasets with Documents': datasets.filter(datasetdocument__isnull=False).distinct().count(),
            'Total Documents': sum(d.documents.count() for d in datasets),
        }
        
        story.append(self.create_metrics_table(dataset_metrics, "Datasets Analysis"))

    def _add_activity_timeline(self, story, project):
        """Add recent activity timeline."""
        events = Action.objects.filter(
            verb__startswith='research.',
            target_content_type__model__in=['project', 'study', 'dataset']
        ).order_by('-timestamp')[:10]
        
        story.append(Paragraph("Recent Activity (Last 10 Events)", self.styles['SectionHeader']))
        
        if events.exists():
            for event in events:
                event_text = f"‚Ä¢ {event.timestamp.strftime('%Y-%m-%d %H:%M')} - {event.verb.replace('research.', '').replace('_', ' ').title()}"
                if event.actor:
                    event_text += f" by {event.actor}"
                story.append(Paragraph(event_text, self.styles['Normal']))
        else:
            story.append(Paragraph("No recent activity found.", self.styles['Normal']))
        
        story.append(Spacer(1, 24))


class AuditTrailGenerator(PDFReportGenerator):
    """
    Generate detailed audit trail reports.
    Task 3.6: Comprehensive audit trail reporting for compliance.
    """
    
    def generate_audit_report(self, time_range_days=7, event_types=None):
        """Generate detailed audit trail report."""
        self._check_reportlab_availability()
        logger.info(f"Generating audit trail report for {time_range_days} days")
        
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4, topMargin=0.5*inch)
        story = []
        
        # Header
        self.generate_header(
            story,
            "Detailed Audit Trail Report",
            f"Security and Activity Analysis - {time_range_days} Days"
        )
        
        # Audit Summary
        self._add_audit_summary(story, time_range_days, event_types)
        
        # Event Details
        self._add_event_details(story, time_range_days, event_types)
        
        # Security Analysis
        self._add_security_analysis(story, time_range_days)
        
        # Footer
        self.generate_footer(story)
        
        # Build document
        doc.build(story)
        buffer.seek(0)
        
        logger.info("Audit trail report generated successfully")
        return buffer

    def _add_audit_summary(self, story, days, event_types):
        """Add audit summary section."""
        end_date = timezone.now()
        start_date = end_date - timedelta(days=days)
        
        events_query = Action.objects.filter(
            verb__startswith='research.',
            timestamp__gte=start_date
        )
        
        if event_types:
            events_query = events_query.filter(verb__in=event_types)
        
        events = events_query.order_by('-timestamp')
        
        # Daily event counts
        daily_counts = defaultdict(int)
        for event in events:
            date_key = event.timestamp.date()
            daily_counts[date_key] += 1
        
        summary_metrics = {
            'Report Period': f"{start_date.strftime('%Y-%m-%d')} to {end_date.strftime('%Y-%m-%d')}",
            'Total Events': events.count(),
            'Unique Event Types': events.values('verb').distinct().count(),
            'Unique Users': events.exclude(actor__isnull=True).values('actor').distinct().count(),
            'Average Events/Day': round(events.count() / max(days, 1), 1),
            'Peak Day Events': max(daily_counts.values()) if daily_counts else 0
        }
        
        story.append(self.create_metrics_table(summary_metrics, "Audit Trail Summary"))

    def _add_event_details(self, story, days, event_types):
        """Add detailed event information."""
        end_date = timezone.now()
        start_date = end_date - timedelta(days=days)
        
        events_query = Action.objects.filter(
            verb__startswith='research.',
            timestamp__gte=start_date
        )
        
        if event_types:
            events_query = events_query.filter(verb__in=event_types)
        
        events = events_query.order_by('-timestamp')[:50]  # Limit for report size
        
        story.append(Paragraph("Event Details (Most Recent 50)", self.styles['SectionHeader']))
        
        if events.exists():
            # Create events table
            event_data = [['Timestamp', 'Event Type', 'Actor', 'Target']]
            
            for event in events:
                event_data.append([
                    event.timestamp.strftime('%Y-%m-%d %H:%M'),
                    event.verb.replace('research.', '').replace('_', ' ').title(),
                    str(event.actor) if event.actor else 'System',
                    str(event.target)[:30] + '...' if event.target and len(str(event.target)) > 30 
                    else str(event.target) if event.target else ''
                ])
            
            events_table = Table(event_data, colWidths=[1.5*inch, 2*inch, 1.5*inch, 2*inch])
            events_table.setStyle(TableStyle([
                # Header styling
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#0d6efd')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTSIZE', (0, 0), (-1, 0), 10),
                ('FONTSIZE', (0, 1), (-1, -1), 8),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                
                # Alternating row colors
                ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#f8f9fa')]),
                
                # Borders
                ('GRID', (0, 0), (-1, -1), 0.5, colors.lightgrey),
                ('LINEBELOW', (0, 0), (-1, 0), 2, colors.HexColor('#0d6efd'))
            ]))
            
            story.append(events_table)
        else:
            story.append(Paragraph("No events found for the specified criteria.", self.styles['Normal']))
        
        story.append(Spacer(1, 24))

    def _add_security_analysis(self, story, days):
        """Add security-focused analysis."""
        end_date = timezone.now()
        start_date = end_date - timedelta(days=days)
        
        security_events = Action.objects.filter(
            verb__startswith='research.',
            timestamp__gte=start_date,
            verb__in=[
                'research.security_scan_performed',
                'research.shared_document_accessed',
                'research.shared_document_downloaded',
                'research.audit_trail_accessed',
                'research.access_control_modified'
            ]
        )
        
        # Analyze access patterns
        ip_addresses = defaultdict(int)
        for event in security_events:
            # This would need to be enhanced with actual IP extraction from event data
            ip_addresses['Various IPs'] += 1
        
        security_metrics = {
            'Security Events': security_events.count(),
            'Document Access Events': security_events.filter(verb='research.shared_document_accessed').count(),
            'Download Events': security_events.filter(verb='research.shared_document_downloaded').count(),
            'Audit Access Events': security_events.filter(verb='research.audit_trail_accessed').count(),
            'Unique Access IPs': len(ip_addresses),
        }
        
        story.append(self.create_metrics_table(security_metrics, "Security Analysis")) 